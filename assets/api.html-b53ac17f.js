import{_ as n,o as s,c as a,a as p}from"./app-aa72e212.js";const t={},e=p(`<h1 id="api-一体化调用" tabindex="-1"><a class="header-anchor" href="#api-一体化调用" aria-hidden="true">#</a> API 一体化调用</h1><h2 id="api-声明" tabindex="-1"><a class="header-anchor" href="#api-声明" aria-hidden="true">#</a> API 声明</h2><p>目前 bwcx 提供了 API 声明组件，通过装饰器形式声明 API 的属性，用于前后端一体化开发接口调用。</p><p>安装依赖：<code>npm i -S bwcx-api</code></p><p>使用 <code>@Api</code> 装饰器为路由方法声明 API 相关属性，相关路由方法必须使用 <code>@Contract()</code> 声明请求/响应 DTO，否则无法用于后续的接口生成：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Contract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  GetUsersReqDTO<span class="token punctuation">,</span>
  GetUsersRespDTO<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;your-common/modules/user/user.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Api <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-api&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Api</span></span><span class="token punctuation">.</span><span class="token function">Summary</span><span class="token punctuation">(</span><span class="token string">&#39;获取用户列表&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Api</span></span><span class="token punctuation">.</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">&#39;通过查询参数获取用户列表数据&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Contract</span></span><span class="token punctuation">(</span>GetUsersReqDTO<span class="token punctuation">,</span> GetUsersRespDTO<span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Data</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> data<span class="token operator">:</span> GetUsersReqDTO<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>GetUsersRespDTO<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> rows<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置客户端调用" tabindex="-1"><a class="header-anchor" href="#配置客户端调用" aria-hidden="true">#</a> 配置客户端调用</h2><p>bwcx 提供了 <code>api-client</code>，为前后端一体化开发提供近乎无感的客户端调用代码生成。借助这个能力，你可以做到写完服务端接口，保存，即可在前端通过 <code>api.method</code> 像调用本地函数一般直接调用服务端接口，而无需手动处理复杂的 url 拼接、参数填充、数据类型转换等问题。</p><h3 id="配置代码生成" tabindex="-1"><a class="header-anchor" href="#配置代码生成" aria-hidden="true">#</a> 配置代码生成</h3><p>安装依赖：<code>npm i -S bwcx-api-client</code></p><p>在服务端 App 上简单修改，加入代码生成逻辑：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> getDependency <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">BWCX_CONTAINER_KEY</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm/container-key&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiClientGenerator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-api-client/generator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OurApp</span> <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token function">afterStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> apiClientGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiClientGenerator</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          <span class="token doc-comment comment">/** 生成路径 */</span>
          outFilePath<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDir<span class="token punctuation">,</span> <span class="token string">&#39;./common/api/api-client.ts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token doc-comment comment">/** 是否在文件头附加额外的自定义导入语句 */</span>
          prependImports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token doc-comment comment">/** 是否开启请求时额外参数，用于调用时传递额外的参数，可以改变 client 的行为 */</span>
          enableExtraReqOptions<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token generic-function"><span class="token function">getDependency</span><span class="token generic class-name"><span class="token operator">&lt;</span>IAppWiredData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">BWCX_CONTAINER_KEY</span><span class="token punctuation">.</span>WiredData<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span>router<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> apiClientGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次你的应用在开发时重启，都会自动生成一次 api-client，生成文件简化示例如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetUsersReqDTO<span class="token punctuation">,</span> GetUsersRespDTO <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;your-common/modules/user/user.dto&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ApiClient<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 获取用户列表
   *
   * <span class="token keyword">@description</span> 通过查询参数获取用户列表数据
   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>GetEnterpriseLogoMainColorReqDTO<span class="token punctuation">}</span> req The request data (compatible with ReqDTO).
   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>T<span class="token punctuation">}</span> opts Extra request options.
   * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>GetEnterpriseLogoMainColorRespDTO<span class="token punctuation">}</span> The response data (RespDTO).
   */</span>
  <span class="token keyword">public</span> <span class="token function">getUsers</span><span class="token punctuation">(</span>req<span class="token operator">:</span> GetEnterpriseLogoMainColorReqDTO<span class="token punctuation">,</span> opts<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>GetEnterpriseLogoMainColorRespDTO<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>api-client 是自动生成的接口调用代码，其使用最朴素的 HTTP 调用，内部自动根据 DTO 定义完成拼接参数、处理响应等步骤，对外暴露为和 Controller 路由方法几乎一样的函数调用。</p><h3 id="客户端调用" tabindex="-1"><a class="header-anchor" href="#客户端调用" aria-hidden="true">#</a> 客户端调用</h3><p>确保安装了运行时所需依赖：<code>npm i -S urlcat-fork</code></p><p>有了 api-client，各类客户端（Web 前端、小程序等）都可以直接调用服务端接口。为了保证各端调用的灵活性和兼容性，api-client 不会内置实现请求代码，也不依赖任何请求库，不过你只需要简单的适配即可封装出用于在客户端上使用的 client，你可以自己处理细节，诸如使用什么请求库、是否有自带参数、是否传递 csrf token 等行为。</p><p>还记得之前的响应处理器吗？响应处理器让我们只需要考虑纯粹的数据响应，在外层为响应统一做包装。同样地，客户端接收到请求，要把请求体解析回原始的响应返回（RespDTO），这就需要告诉 client 如何解析响应。因此首先需要定义一个响应解析器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractResponseParser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-api-client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiRequestException <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./api-request.exception&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 可以定义一个异常给客户端使用</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ResponseParser</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractResponseParser</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">parse</span><span class="token punctuation">(</span>resp<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析响应，等同于接口的响应处理器的反向操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiRequestException</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>code<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的 ApiClient 被调用时，会将已经自动处理过的用户请求参数传递给请求适配器函数，已处理参数的数据结构如下所示：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  method<span class="token operator">:</span> AllowedRequestMethod<span class="token punctuation">;</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** 请求体，如果是含有文件上传的请求，会返回 FormData 对象 */</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** 请求头 */</span>
  headers<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** 额外请求选项，用户调用 API 时会通过第二个参数传递 */</span>
  extraOpts<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** API 元数据 */</span>
  metadata<span class="token operator">:</span> APIMetadata<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，只需要告诉 ApiClient 我们的自定义请求适配器是什么，它就可以运行了！请求适配器是一个函数，接收刚才提到的参数，并根据参数发起实际 HTTP 请求。以 axios 库为例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> omit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IBwcxApiRequestAdaptorArgs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-api-client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path-to-your-original-api-client&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseParser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path-to-your-response-parser&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 这里可以为 client 添加自定义的请求级选项，在调用 API 时作为第二个参数传递</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IRequestExtraOpts</span> <span class="token punctuation">{</span>
  showTips<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 实现一个请求适配器，接收 ApiClient 提供的参数，并实现发起请求 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RequestAdaptor</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">request</span><span class="token punctuation">(</span>opts<span class="token operator">:</span> IBwcxApiRequestAdaptorArgs<span class="token operator">&lt;</span>IRequestExtraOpts<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> extraOpts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> metadata <span class="token punctuation">}</span> <span class="token operator">=</span> opts<span class="token punctuation">;</span>
    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">omit</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> <span class="token string">&#39;metadata&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;extraOpts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自定义选项的逻辑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> extraOpts<span class="token punctuation">.</span>showTips<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          tips<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg <span class="token operator">||</span> <span class="token string">&#39;服务异常，请稍候再试&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 返回 HTTP 请求的响应数据，之后会交由 \`ResponseParser\` 处理</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request canceled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        tips<span class="token punctuation">.</span><span class="token function">err</span><span class="token punctuation">(</span><span class="token string">&#39;服务异常，请稍候再试&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 拿到可用的 client 对象</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> apiClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResponseParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，enjoy it：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> apiClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path-to-your-client&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 直接在客户端上调用，或挂载到组件</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> apiClient<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 请求参数 */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","api.html.vue"]]);export{r as default};
