import{_ as o,r as c,o as l,c as i,b as s,d as n,e,w as t,a as p}from"./app-aa72e212.js";const u={},r=p(`<h1 id="控制器" tabindex="-1"><a class="header-anchor" href="#控制器" aria-hidden="true">#</a> 控制器</h1><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p>使用控制器根据 url 匹配处理用户请求。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RequestContext<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token comment">// 注入请求上下文</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Ctx</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> ctx<span class="token operator">:</span> RequestContext<span class="token punctuation">;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      rows<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          username<span class="token operator">:</span> <span class="token string">&#39;user1&#39;</span><span class="token punctuation">,</span>
          createdAt<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          userId<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          username<span class="token operator">:</span> <span class="token string">&#39;user2&#39;</span><span class="token punctuation">,</span>
          createdAt<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，我们创建了一个 <code>UserController</code> 类，使用装饰器 <code>@Controller()</code> 将其标注为一个控制器，并指定其路由前缀为 <code>/user</code>。控制器类内所有被 HTTP 方法装饰器标注的方法都将自动注册为路由。</p><p>在刚才的例子中，我们声明了一个路由 <code>/get</code>，其会被自动注册为 <code>GET /user/get</code>，使用 <code>getUsers</code> 方法处理。</p><p>尝试访问 <code>http://localhost:3000/user/get</code>，其将返回一个包含所有用户的 json 数据。</p><p>还有其他的 HTTP 方法装饰器可用，如 <code>@Post()</code>、<code>@Put()</code>、<code>@Patch()</code>、<code>@Delete()</code> 等。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>@Controller()</code> 默认作用域是 <code>Deferred</code>。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>@Ctx()</code> 是 <code>@InjectCtx()</code> 的别名。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>由于依赖扫描顺序是不确定的（更准确地说，业务代码不应该依赖扫描顺序），<code>@Controller()</code> 的第二个参数支持传入选项 <code>{ priority: number }</code> 来设置控制器优先级（默认为 0），以此改变路由装配顺序。</p></div><h2 id="处理参数" tabindex="-1"><a class="header-anchor" href="#处理参数" aria-hidden="true">#</a> 处理参数</h2><p>我们提供了多个参数装饰器（包括 <code>@Param()</code>、<code>@Query()</code>、<code>@Body()</code>）来直接获取用户请求的参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RequestContext<span class="token punctuation">,</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Query <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token function">getUsers</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      rows<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
          username<span class="token operator">:</span> <span class="token string">&#39;user1&#39;</span><span class="token punctuation">,</span>
          createdAt<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          userId<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          username<span class="token operator">:</span> <span class="token string">&#39;user2&#39;</span><span class="token punctuation">,</span>
          createdAt<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上示例，被 <code>@Query()</code> 装饰器装饰的 query 可以直接取到用户输入的所有 url query。当然也可以通过传入一个路径参数来获取指定的值。这对其他几个参数装饰器也适用。</p>`,15),d=s("code",null,"number",-1),k={class:"custom-container tip"},v=s("p",{class:"custom-container-title"},"TIP",-1),m=s("code",null,"@Header()",-1),b=s("code",null,"@Cookie()",-1),h=s("code",null,"@FormFile()",-1),g=s("code",null,"@Referer",-1),y=p(`<h2 id="自定义请求参数装饰器" tabindex="-1"><a class="header-anchor" href="#自定义请求参数装饰器" aria-hidden="true">#</a> 自定义请求参数装饰器</h2><p>框架提供了 <code>createReqParamDecorator</code> 方法供便捷创建定制化装饰器。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 也可以带参数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createReqParamDecorator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>ip<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
<span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Ip</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> ip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function f(_,w){const a=c("RouterLink");return l(),i("div",null,[r,s("p",null,[n("需要注意的是，使用内置参数装饰器取得的值是原始值，这意味在处理某些固定为 string 类型的参数（如 url query）时，即使其类型被声明为 "),d,n("，实际运行时取值也是原始类型。如要校验并转换参数以确保类型安全，请参见 "),e(a,{to:"/core/validation.html"},{default:t(()=>[n("数据校验")]),_:1}),n("。")]),s("div",k,[v,s("p",null,[n("框架还提供了许多使用的请求参数装饰器，如 "),m,n("、"),b,n("、"),h,n("、"),g,n(" 等。请参见 "),e(a,{to:"/references/decorators.html#web"},{default:t(()=>[n("装饰器列表")]),_:1}),n("。")])]),y])}const C=o(u,[["render",f],["__file","controller.html.vue"]]);export{C as default};
