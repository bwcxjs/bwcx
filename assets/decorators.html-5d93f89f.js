import{_ as t,o as d,c as r,a as e}from"./app-aa72e212.js";const a={},h=e('<h1 id="装饰器列表" tabindex="-1"><a class="header-anchor" href="#装饰器列表" aria-hidden="true">#</a> 装饰器列表</h1><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h2><table><thead><tr><th>装饰器</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>@Provide()</td><td>类</td><td>将类标识为可注入并绑定到容器</td></tr><tr><td>@Inject()</td><td>属性、构造器参数</td><td>注入依赖</td></tr><tr><td>@MultiInject()</td><td>属性、构造器参数</td><td>注入多个依赖，数组形式</td></tr><tr><td>@Optional()</td><td>属性、构造器参数</td><td>与 <code>@Inject()</code> 配合使用，依赖不存在时注入不会抛出异常</td></tr><tr><td>@InjectContainer()</td><td>属性、构造器参数</td><td>注入主容器实例</td></tr><tr><td>@InjectApp()</td><td>属性、构造器参数</td><td>注入当前的应用实例</td></tr><tr><td>@InjectAppConfig()</td><td>属性、构造器参数</td><td>注入当前的应用配置</td></tr><tr><td>@InjectCtx()</td><td>属性、构造器参数</td><td>注入当前的请求上下文，仅请求作用域的依赖可以使用</td></tr></tbody></table><h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件" aria-hidden="true">#</a> 核心组件</h2><table><thead><tr><th>装饰器</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>@Config()</td><td>类</td><td>声明配置类</td></tr><tr><td>@Middleware()</td><td>类</td><td>声明中间件类，自动绑定到容器且作用域为 <code>DeferredTransient</code></td></tr><tr><td>@UseMiddlewares()</td><td>类、方法</td><td>声明为控制器或路由方法应用的中间件列表</td></tr><tr><td>@Guard()</td><td>类</td><td>声明守卫类，自动绑定到容器且作用域为 <code>DeferredTransient</code></td></tr><tr><td>@UseGuards()</td><td>类、方法</td><td>声明为控制器或路由方法应用的守卫列表</td></tr><tr><td>@UseGuardsOr()</td><td>类、方法</td><td>声明为控制器或路由方法应用的守卫列表，其中有任一一个守卫通过则视为通过</td></tr><tr><td>@ResponseHandler()</td><td>类</td><td>声明响应处理器类，自动绑定到容器且作用域为 <code>DeferredTransient</code></td></tr><tr><td>@ExceptionHandler()</td><td>类</td><td>声明异常处理器类，自动绑定到容器且作用域为 <code>Singleton</code></td></tr><tr><td>@Plugin()</td><td>类</td><td>声明插件类，自动绑定到容器且作用域为 <code>Singleton</code></td></tr></tbody></table><h2 id="web" tabindex="-1"><a class="header-anchor" href="#web" aria-hidden="true">#</a> Web</h2><table><thead><tr><th>装饰器</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>@Controller()</td><td>类</td><td>声明控制器类，自动绑定到容器且作用域为 <code>Deferred</code></td></tr><tr><td>@Service()</td><td>类</td><td>声明服务类，自动绑定到容器且作用域为 <code>Deferred</code></td></tr><tr><td>@Get()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 GET 的路由</td></tr><tr><td>@Post()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 POST 的路由</td></tr><tr><td>@Put()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 PUT 的路由</td></tr><tr><td>@Patch()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 PATCH 的路由</td></tr><tr><td>@Delete()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 DELETE 的路由</td></tr><tr><td>@Head()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 HEAD 的路由</td></tr><tr><td>@Options()</td><td>方法</td><td>为路由方法设置 HTTP Method 为 OPTIONS 的路由</td></tr><tr><td>@All()</td><td>方法</td><td>为路由方法设置 HTTP Method 为全部的路由</td></tr><tr><td>@Param()</td><td>参数</td><td>声明被装饰参数为请求 url param</td></tr><tr><td>@Query()</td><td>参数</td><td>声明被装饰参数为请求 url query</td></tr><tr><td>@Body()</td><td>参数</td><td>声明被装饰参数为请求 body</td></tr><tr><td>@FormFile()</td><td>参数</td><td>声明被装饰参数为请求的上传文件</td></tr><tr><td>@Header()</td><td>参数</td><td>声明被装饰参数为请求头</td></tr><tr><td>@UserAgent()</td><td>参数</td><td>声明被装饰参数为请求头的 user-agent</td></tr><tr><td>@Referer()</td><td>参数</td><td>声明被装饰参数为请求头的 referer</td></tr><tr><td>@Cookie()</td><td>参数</td><td>声明被装饰参数为请求头的 cookie</td></tr><tr><td>@Session()</td><td>参数</td><td>声明被装饰参数为请求 session</td></tr><tr><td>@Host()</td><td>参数</td><td>声明被装饰参数为请求 host</td></tr><tr><td>@Url()</td><td>参数</td><td>声明被装饰参数为请求 url</td></tr></tbody></table><h2 id="数据校验" tabindex="-1"><a class="header-anchor" href="#数据校验" aria-hidden="true">#</a> 数据校验</h2><table><thead><tr><th>装饰器</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>@FromParam()</td><td>属性</td><td>声明 DTO 字段来源为 url param</td></tr><tr><td>@FromQuery()</td><td>属性</td><td>声明 DTO 字段来源为 url query</td></tr><tr><td>@FromBody()</td><td>属性</td><td>声明 DTO 字段来源为 body</td></tr><tr><td>@IsFile()</td><td>属性</td><td>声明 DTO 字段类型为上传文件</td></tr><tr><td>@Contract()</td><td>方法</td><td>声明路由方法的请求和响应 DTO 以供数据校验</td></tr><tr><td>@Data()</td><td>参数</td><td>声明被装饰参数为已经过校验和转换的数据</td></tr></tbody></table><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><table><thead><tr><th>装饰器</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>@InjectReflector()</td><td>属性、构造器参数</td><td>注入反射器，用于反射获取当前的中间件/守卫/响应处理器被应用到的控制器及其路由方法</td></tr><tr><td>@SetMetadata()</td><td>类、方法</td><td>设置元数据</td></tr></tbody></table>',11),o=[h];function n(c,i){return d(),r("div",null,o)}const l=t(a,[["render",n],["__file","decorators.html.vue"]]);export{l as default};
