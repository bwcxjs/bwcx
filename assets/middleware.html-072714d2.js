import{_ as n,o as s,c as a,a as t}from"./app-aa72e212.js";const e={},p=t(`<h1 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h1><h2 id="定义中间件" tabindex="-1"><a class="header-anchor" href="#定义中间件" aria-hidden="true">#</a> 定义中间件</h2><p>bwcx 支持装载 Koa 式的中间件。要定义一个中间件，需要实现自定义中间件类。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MiddlewareNext<span class="token punctuation">,</span> RequestContext<span class="token punctuation">,</span> IBwcxMiddleware<span class="token punctuation">,</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Middleware</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">LogMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">IBwcxMiddleware</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">use</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> RequestContext<span class="token punctuation">,</span> next<span class="token operator">:</span> MiddlewareNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> _start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们实现了一个打印请求日志的中间件类，其必须用 <code>@Middleware()</code> 标注以被容器管理。同样地，如有需要，我们可以在类中注入其他依赖。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>@Middleware()</code> 默认作用域是 <code>DeferredTransient</code>。</p></div><h2 id="使用全局中间件" tabindex="-1"><a class="header-anchor" href="#使用全局中间件" aria-hidden="true">#</a> 使用全局中间件</h2><p>如果想把中间件应用到全局，可以在 <code>app.ts</code> 中声明需要应用的中间件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> LogMiddleware <span class="token keyword">from</span> <span class="token string">&#39;./middlewares/log.middleware&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OurApp</span> <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> globalMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>LogMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在控制器中使用中间件" tabindex="-1"><a class="header-anchor" href="#在控制器中使用中间件" aria-hidden="true">#</a> 在控制器中使用中间件</h2><p>如果想灵活地应用中间件，可以使用 <code>@UseMiddlewares()</code> 装饰器，它可以装饰控制器或路由方法，接收一个或多个中间件类参数并按顺序加载它们。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> UseMiddlewares <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> LogMiddleware <span class="token keyword">from</span> <span class="token string">&#39;../middlewares/log.middleware&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">UseMiddlewares</span></span><span class="token punctuation">(</span>LogMiddleware<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 或只给指定路由方法应用中间件</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">UseMiddlewares</span></span><span class="token punctuation">(</span>LogMiddleware<span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> rows<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="带参中间件" tabindex="-1"><a class="header-anchor" href="#带参中间件" aria-hidden="true">#</a> 带参中间件</h2><p>有时我们需要对中间件使用某些参数初始化或定制行为，类似于中间件工厂。框架提供了带参中间件支持，可以在在装饰位置赋予中间件参数。</p><p>首先需要为中间件引入 Reflector，它可以帮助我们读取被装饰类或方法的元数据。这里我们以一个上报中间件为例，需要为接口进行上报，但每个接口要上报的 id 可能不同。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Optional <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> combineDecorators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MiddlewareNext<span class="token punctuation">,</span> RequestContext<span class="token punctuation">,</span> IBwcxMiddleware<span class="token punctuation">,</span> Middleware<span class="token punctuation">,</span> InjectReflector<span class="token punctuation">,</span> Reflector<span class="token punctuation">,</span> SetMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Middleware</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ReportMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">IBwcxMiddleware</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectReflector</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Optional</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  reflector<span class="token operator">?</span><span class="token operator">:</span> Reflector<span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token function">use</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> RequestContext<span class="token punctuation">,</span> next<span class="token operator">:</span> MiddlewareNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取被装饰类或方法上的元数据作为参数来改变中间件行为</span>
    <span class="token keyword">const</span> reportId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token operator">?.</span><span class="token generic-function"><span class="token function">getMetadata</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;middleware:reportMiddeware:id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reportSome</span><span class="token punctuation">(</span>reportId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为了便于使用，可以创建一个中间件装饰器工厂</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Report</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 组合多个装饰器成单个装饰器，和手动应用这些装饰器效果一致</span>
  <span class="token keyword">return</span> <span class="token function">combineDecorators</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token comment">// 为被装饰的方法设置元数据，中间件即可读取它</span>
    <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;middleware:reportMiddeware:id&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UseMiddlewares</span><span class="token punctuation">(</span>ReportMiddleware<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器上使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Report <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../middlewares/report.middleware&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Report</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      rows<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>Reflector</code> 仅可用于中间件、守卫和响应处理器。</p></div>`,19),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","middleware.html.vue"]]);export{r as default};
