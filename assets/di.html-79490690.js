import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,a as i}from"./app-aa72e212.js";const l={},r=i(`<h1 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>依赖注入是面向对象中管理依赖的常用手段，它可以很好地帮助我们解决类与类之间的依赖管理问题，无需操心类之间复杂的依赖关系。当你的类需要任何其他类的实例作为依赖项时，只需声明即可。在底层，我们提供了一个集中式管理依赖的容器（也被称为控制反转容器），当你的类实例化时，它会递归计算并将所有需要的依赖项备妥，最后注入到对象中。当然，你的类也是由它负责实例化的。</p><p>我们提供了依赖注入作为底层能力。你可以在几乎所有的类中使用依赖注入来更好的组织代码。</p><p>对一个类使用 <code>@Provide()</code> 装饰器以声明它可以被其他类注入，并自动被容器托管。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">FormatUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">formatString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">str: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他类中使用 <code>@Inject()</code> 注入依赖，容器会帮我们自动解析依赖关系并实例化：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FormatUtil <span class="token keyword">from</span> <span class="token string">&#39;./format.util&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> formatUtil<span class="token operator">:</span> FormatUtil<span class="token punctuation">;</span>

  <span class="token comment">// 也可以使用构造器注入</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> formatUtil<span class="token operator">:</span> FormatUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>formatUtil <span class="token operator">=</span> formatUtil<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formatUtil<span class="token punctuation">.</span><span class="token function">formatString</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖标识符" tabindex="-1"><a class="header-anchor" href="#依赖标识符" aria-hidden="true">#</a> 依赖标识符</h2><p><code>@Provide()</code> 支持传入参数来指定依赖标识符。类似地，<code>@Inject()</code> 也支持指定依赖标识符。</p><p>标识符可以是 <code>string</code>、<code>symbol</code> 或类，一旦指定标识符，那么注入的时候必须使用相同的标识符，否则依赖将无法找到。默认情况下，容器将自动选择被装饰/被声明为类型的类作为标识符。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;format&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormatUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">formatString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">str: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token string">&#39;format&#39;</span><span class="token punctuation">)</span>
  formatUtil<span class="token operator">:</span> FormatUtil<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formatUtil<span class="token punctuation">.</span><span class="token function">formatString</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>你可以指定依赖的作用域，使得应用的生命周期和实例化时机相应改变。作用域有以下几种：</p><ul><li><code>ProviderScope.Singleton</code>（单例作用域，默认）：托管在全局容器，在整个应用的生命周期只会实例化一次，之后将使用已实例化的对象</li><li><code>ProviderScope.Transient</code>（瞬态作用域）：托管在全局容器，每次注入都会实例化一个新的对象</li><li><code>ProviderScope.Deferred</code>（请求作用域）：托管在请求作用域容器，在请求链路中是单例，整个请求只实例化一次</li><li><code>ProviderScope.DeferredTransient</code>（瞬态请求作用域）：托管在请求作用域容器，在请求链路中是瞬态，每次注入都会实例化一个新的对象</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> ProviderScope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> scope<span class="token operator">:</span> ProviderScope<span class="token punctuation">.</span>Transient <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormatUtil</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">formatString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">str: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>请求作用域的依赖可以注入其他瞬态和单例的依赖，但瞬态和单例的依赖无法注入请求作用域的依赖。这是因为，请求作用域上的依赖实际被托管在一个仅在请求开始时才会创建的子容器中。</p></div><h3 id="条件注入和依赖重写" tabindex="-1"><a class="header-anchor" href="#条件注入和依赖重写" aria-hidden="true">#</a> 条件注入和依赖重写</h3><p>有时可能需要按条件注入依赖，如实现基于环境的配置。框架也提供了简洁的支持，只有满足 bool 表达式或符合环境（<code>env.NODE_ENV</code>）时才会注入：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;myConfig&#39;</span><span class="token punctuation">,</span> when<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigDev</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> rpcPort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;myConfig&#39;</span><span class="token punctuation">,</span> when<span class="token operator">:</span> <span class="token string">&#39;production&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigProd</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> rpcPort <span class="token operator">=</span> <span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，更多情况下，我们更习惯于定义一个默认设置，只在某个环境下覆盖部分字段，这种时候可以使用依赖重写，当 <code>when</code> 的条件满足时将重写默认依赖：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> rpcPort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> MyConfig<span class="token punctuation">,</span> when<span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span> override<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigProd</span> <span class="token keyword">extends</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> rpcPort <span class="token operator">=</span> <span class="token number">8081</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编程式接口" tabindex="-1"><a class="header-anchor" href="#编程式接口" aria-hidden="true">#</a> 编程式接口</h2><p>通过编程式接口可以动态的控制提供和获取依赖。</p><p>例如，绑定一个常量到容器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> provideConst <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>

<span class="token function">provideConst</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，还可以绑定类（<code>provideClass</code>）或函数（<code>provideFunction</code>）。需要注意的是，除了类以外，其他类型在容器中始终是单例作用域。</p><p>也支持手动从容器中查找依赖：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getDependency <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getDependency</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于接口编程" tabindex="-1"><a class="header-anchor" href="#基于接口编程" aria-hidden="true">#</a> 基于接口编程</h2><p>在很多设计模式指导中，经常提及基于接口而非实现编程。在依赖注入中实践基于接口编程将变得十分容易。你既可以将类型声明为接口，而标识符指定为具体实现类；也可以完全和实现类解耦，使用接口来获取依赖。对于后者，由于 TypeScript 现阶段的实现，使用时需要注意接口的声明方式。</p><p>声明接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 由于 TypeScript 接口在运行期不存在，因此需要定义一个同名的实体变量（推荐 symbol）</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ISomeService <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;ISomeService&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeService</span> <span class="token punctuation">{</span>
  <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于接口实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ISomeService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./some.interface&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 在 Provide 时指定标识符为接口</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> ISomeService <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SomeService</span> <span class="token keyword">implements</span> <span class="token class-name">ISomeService</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按接口注入：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject<span class="token punctuation">,</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ISomeService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./some.interface&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以接口作为标识符注入</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span>ISomeService<span class="token punctuation">)</span>
  <span class="token comment">// 或者指定具体的实现类，但可以放心，类型声明还是接口</span>
  <span class="token comment">// @Inject(SomeService)</span>
  someService<span class="token operator">:</span> ISomeService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果一个接口或标识符对应存在多个实现类，则此时注入将出现 <code>Ambiguous match found</code> 错误。尝试使用条件注入或依赖重写以保证依赖唯一。</p></div><h2 id="限制" tabindex="-1"><a class="header-anchor" href="#限制" aria-hidden="true">#</a> 限制</h2><p>所有使用 <code>@Provide</code> 或其他声明装饰器的类必须位于模块的顶级，不能由函数动态地创建类。如果需要动态创建并绑定，请使用编程式接口（如 <code>provideClass</code>）向容器绑定依赖。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,41),u={href:"https://github.com/dreamerblue/dainty-di",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,s("p",null,[n("bwcx 的依赖注入能力由 "),s("a",u,[n("Dainty DI"),c(a)]),n(" 驱动，你可以参考它的文档来了解更多。")])])}const b=e(l,[["render",d],["__file","di.html.vue"]]);export{b as default};
