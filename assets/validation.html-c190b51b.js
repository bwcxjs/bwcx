import{_ as c,r as a,o as l,c as i,b as n,d as s,e as t,w as r,a as p}from"./app-aa72e212.js";const u={},k=n("h1",{id:"数据校验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据校验","aria-hidden":"true"},"#"),s(" 数据校验")],-1),d=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),v=n("p",null,"bwcx 集成了数据校验能力，并和 OOP 结合，以提供统一的开发体验。",-1),m=n("p",null,"我们提倡面向接口的请求、响应做校验，这将有助于我们实现诸如接口文档生成、client 调用等特性。",-1),b={href:"https://github.com/typestack/class-validator",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>我们还提供 <code>@FromParam()</code>、<code>@FromQuery()</code>、<code>@FromBody()</code> 这几个装饰器，用来指明字段的来源。对开发者来说，请求数据是自动拼装好的一个对象，不再需要关心字段从哪来，并分别校验。</p><p>安装依赖：<code>npm i -S class-validator class-transformer</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FromQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Type <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-transformer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsDate<span class="token punctuation">,</span> IsInt<span class="token punctuation">,</span> Length<span class="token punctuation">,</span> Max<span class="token punctuation">,</span> Min<span class="token punctuation">,</span> ValidateNested <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-validator&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsInt</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Length</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Date<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsDate</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  createdAt<span class="token operator">:</span> Date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetUsersReqDTO</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">FromQuery</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Length</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">FromQuery</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsInt</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Min</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetUsersRespDTO</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> UserDTO<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ValidateNested</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  rows<span class="token operator">:</span> UserDTO<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>DTO 不应注入其他的类，也不应该带有业务逻辑的复杂校验，这部分校验应该在 Controller 层完成。DTO 仅包含纯粹的字段合法性校验。</p></div><h2 id="在控制器中使用" tabindex="-1"><a class="header-anchor" href="#在控制器中使用" aria-hidden="true">#</a> 在控制器中使用</h2><p>使用 <code>@Contract()</code> 装饰器指定该接口的请求和响应类型约束。如果为空，则传 <code>null</code>。</p>`,6),f=n("code",null,"@Data()",-1),y=n("code",null,"ValidationException",-1),g=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Data<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Contract <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetUsersReqDTO<span class="token punctuation">,</span> GetUsersRespDTO <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.dto&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Contract</span></span><span class="token punctuation">(</span>GetUsersReqDTO<span class="token punctuation">,</span> GetUsersRespDTO<span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Data</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> data<span class="token operator">:</span> GetUsersReqDTO<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>GetUsersRespDTO<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> rows<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在 App 中可以通过配置 <code>validation</code> 属性来实现仅开发环境校验响应。</p></div>`,2);function _(w,x){const e=a("ExternalLinkIcon"),o=a("RouterLink");return l(),i("div",null,[k,d,v,m,n("p",null,[s("对于每个需要校验的接口，都应定义相关 DTO（数据传输对象）。我们使用 "),n("a",b,[s("class-validator"),t(e)]),s(" 库驱动校验，因此 DTO 的定义可以参考它的文档。")]),h,n("p",null,[s("同时，可以使用 "),f,s(" 装饰器获取校验通过的请求对象。如果校验不通过，则抛出 "),y,s(" 异常。关于如何处理异常，参见 "),t(o,{to:"/core/exception.html"},{default:r(()=>[s("异常处理")]),_:1}),s("。")]),g])}const T=c(u,[["render",_],["__file","validation.html.vue"]]);export{T as default};
