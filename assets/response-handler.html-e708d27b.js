import{_ as n,o as s,c as a,a as e}from"./app-aa72e212.js";const p={},t=e(`<h1 id="响应处理器" tabindex="-1"><a class="header-anchor" href="#响应处理器" aria-hidden="true">#</a> 响应处理器</h1><p>对于业务需要自定义响应格式的情形，bwcx 内建提供了响应处理器，接口只需要返回符合 DTO 约束的对象，然后交由响应处理器处理。</p><h2 id="定义响应处理器" tabindex="-1"><a class="header-anchor" href="#定义响应处理器" aria-hidden="true">#</a> 定义响应处理器</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseHandler<span class="token punctuation">,</span> IBwcxResponseHandler<span class="token punctuation">,</span> RequestContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">ResponseHandler</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">GeneralResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IBwcxResponseHandler</span> <span class="token punctuation">{</span>
  <span class="token comment">// response 参数为路由方法的返回</span>
  <span class="token function">handle</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> RequestContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以对原返回内容包装，用此对象作为响应</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> response<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上示例，当我们的路由方法返回 <code>{ rows: [] }</code> 时，经过响应处理器，最终的响应体将变为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;success&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置默认响应处理器" tabindex="-1"><a class="header-anchor" href="#配置默认响应处理器" aria-hidden="true">#</a> 配置默认响应处理器</h2><p>如果应用中大部分接口都有固定的响应格式，则建议配置默认响应处理器。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> GeneralResponseHandler <span class="token keyword">from</span> <span class="token string">&#39;./response-handlers/general.response-handler&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">OurApp</span> <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> responseHandler <span class="token operator">=</span> GeneralResponseHandler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在控制器中使用响应处理器" tabindex="-1"><a class="header-anchor" href="#在控制器中使用响应处理器" aria-hidden="true">#</a> 在控制器中使用响应处理器</h2><p>对于个别接口需要定制响应的情形，可以单独针对控制器或路由方法应用响应处理器。</p><p>首先，我们需要为我们的响应处理器类创建一个自定义装饰器，这将方便我们在控制器上应用它。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseHandler<span class="token punctuation">,</span> IBwcxResponseHandler<span class="token punctuation">,</span> RequestContext<span class="token punctuation">,</span> createResponseHandlerDecorator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">ResponseHandler</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">GeneralResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IBwcxResponseHandler</span> <span class="token punctuation">{</span>
  <span class="token comment">// response 参数为路由方法的返回</span>
  <span class="token function">handle</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> ctx<span class="token operator">:</span> RequestContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以对原返回内容包装，用此对象作为响应</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> response<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">GeneralResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createResponseHandlerDecorator</span><span class="token punctuation">(</span>GeneralResponseHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器上使用装饰器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;bwcx-ljsm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GeneralResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../response-handlers/general.response-handler&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Controller</span></span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">GeneralResponse</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&#39;/get&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 或只给指定路由方法应用响应处理器</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">GeneralResponse</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">async</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      rows<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>响应处理器只有一个会生效，其匹配优先级为 <code>路由方法 &gt; 控制器 &gt; 全局</code>。</p><p>请勿在同一位置多次应用响应处理器（如在同一个路由方法上应用多个响应处理器），这可能会导致预期外的结果。</p></div>`,16),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","response-handler.html.vue"]]);export{u as default};
